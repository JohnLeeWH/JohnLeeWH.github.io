<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTPS的学习</title>
    <url>/2020/03/28/HTTPS%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="HTTP的安全风险"><a href="#HTTP的安全风险" class="headerlink" title="HTTP的安全风险"></a>HTTP的安全风险</h3><p>HTTP（超文本传输协议）是目前互联网最常用的应用层协议，在客户端浏览器与www服务器之间传递信息。<br>传递信息的过程中，由于HTTP无连接无状态的特点，容易被链路上的其它人截获数据包，并导致数据泄露和恶意人员伪装利用。</p>
<h3 id="HTTPS的意义"><a href="#HTTPS的意义" class="headerlink" title="HTTPS的意义"></a>HTTPS的意义</h3><p>根据上面提到的HTTP的风险，HTTPS就是为了解决这种问题而诞生的。<br>HTTPS是HTTP协议的一种扩展，在HTTP基础上加上SSL（TLS）来保证安全性。SSL对原来的HTTP数据提供了加密性、数据一致性、身份认证的安全功能。</p>
<h3 id="SSL与TLS"><a href="#SSL与TLS" class="headerlink" title="SSL与TLS"></a>SSL与TLS</h3><p>TLS <em>（传输层安全Transport Layer Security）</em>是SSL <em>（安全套接层Secure Sockets Layer）</em>的后续版本，TLS与SSL在传输层与应用层之间对网络连接进行加密。<br>作用有：</p>
<ol>
<li>认证用户和服务器，确保数据发送到正确的客户机和服务器；</li>
<li>加密数据以防止数据中途被窃取；</li>
<li>维护数据的完整性，确保数据在传输过程中不被改变。<a id="more"></a>
<h3 id="安全性的实现"><a href="#安全性的实现" class="headerlink" title="安全性的实现"></a>安全性的实现</h3><h4 id="密码学概念"><a href="#密码学概念" class="headerlink" title="密码学概念"></a>密码学概念</h4></li>
</ol>
<ul>
<li>明文：有意义的字符或比特集，通过某种公开编码就能获得的消息。类似于人人都能够读懂的信息。</li>
<li>密文：明文进行某种算法转换后变成密文，不能直接获得包含信息。类似于被处理过的无法直接读懂的信息。</li>
<li>加密：把原始的信息（明文）转换为密文的信息变换过程。</li>
<li>解密：把已经加密的信息恢复为明文的过程。</li>
<li>密钥：在明文转换为密文或将密文转换为明文的算法中输入的参数，类似于解开锁的特定钥匙。</li>
</ul>
<h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><p>对称加密 <em>（Symmetrical Encryption）</em>，就是加密和解密时使用的密钥都是同样的密钥。<br>在双方通信时使用对称加密时，发送方和接收方协商好对加密解密信息使用同一个的密钥。<br>只要保证双方密钥的安全不被泄露，整个通信过程就是机密的。</p>
<h5 id="常见的对称加密算法"><a href="#常见的对称加密算法" class="headerlink" title="常见的对称加密算法"></a>常见的对称加密算法</h5><ul>
<li>DES <em>（数据加密标准Data Encryption Standard）</em>用于数字数据加密的对称加密算法。</li>
<li>3DES从原始数据加密标准DES衍生而来。</li>
<li>AES-128、AES-192、AES-256 <em>（高级加密标准Advanced Encryption Standard）</em>，它是DES算法的替代者，安全强度很高，性能也很好，是应用最广泛的对称加密算法。</li>
<li>ChaCha20是Google设计的另一种加密算法，密钥长度固定未256位，纯软件运行性能要超过AES。</li>
</ul>
<h5 id="对称加密的问题"><a href="#对称加密的问题" class="headerlink" title="对称加密的问题"></a>对称加密的问题</h5><p>因为上面提到双方加密解密都通过同一个密钥，则发送方对明文加密后，会把密钥也传输给接收方来解密密文。<br>如果在密钥传给解密方的过程中，被恶意人士截取了该密钥。密钥信息泄露后，则所有通过该密钥加密的信息都能被恶意人士通过截获的密钥解密获取，失去了通信的安全性。</p>
<h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><p>非对称加密 <em>（Asymmetrical Encryption）</em>也被称为公钥加密，对对称加密来说是一种新的改良加密方式。<br>非对称加密中有两个密钥，使用其中一个密钥加密需要另一个密钥进行解密。<br>所以非对称加密通常会以下面的方式使用：一个公钥（公开任何人都能使用），一个私钥（只有自己知道）。公钥用来加密，私钥用来解密。<br>公钥先会提供给所有发送者，让发送方用公钥对他们的信息进行加密，接收方获得密文后，使用私钥对其进行解密。<br>由于只有私钥能解密公钥加密的密文，所以避免了解密能力在传输过程中被网络上的其它人获得。</p>
<h5 id="常用非对称加密算法"><a href="#常用非对称加密算法" class="headerlink" title="常用非对称加密算法"></a>常用非对称加密算法</h5><ul>
<li>DH</li>
<li>DSA</li>
<li>RSA，最重要最出名的一个，安全性基于整数分解，使用两个超大素数的乘积作为生成密钥的材料，想要从公开的公钥中推算出私钥非常困难。</li>
<li>ECC <em>（Elliptic Curve Cryptography）</em>，基于椭圆曲线离散对数的数学难题，使用特定的曲线方程和基点生成公钥和私钥，ECDHE用于密钥交换，ECDSA用于数字签名。</li>
</ul>
<h4 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h4><p>由于非对称算法RSA运算速度慢，而AES的加密速度快，TLS就使用混合加密。</p>
<ol>
<li>在通信刚开始使用非对称算法，比如RSA、ECDHE，解决对称加密的密钥传输问题；</li>
<li>然后用随机数产生对称加密算法使用的会话密钥 <em>（session key）</em>，该密钥通过非对称算法加密后传输；</li>
<li>双方拥有会话密钥后就使用会话密钥进行对称加密完成后面的信息传输。</li>
</ol>
<h3 id="完整性的实现"><a href="#完整性的实现" class="headerlink" title="完整性的实现"></a>完整性的实现</h3><h4 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h4><p>密码学中，盐是一项随机数据，用作哈希数据，密码或密码的单向函数的附加输入。<br>单向是指算法没有密钥可以解密，只能单向加密，不能逆推出原文。<br>常用于保护存储中的密码只能被匹配，而不被人看见内容。</p>
<h4 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h4><p>摘要算法 <em>（Digest Algorithm）</em>，可以理解成一种特殊的压缩算法，能够把任意长度的数据压缩成一种固定长度的字符串，相当于给数据加了把锁。同样的数据信息可以生成同样的摘要。</p>
<h5 id="常用的摘要算法"><a href="#常用的摘要算法" class="headerlink" title="常用的摘要算法"></a>常用的摘要算法</h5><ul>
<li>MD5 <em>（Message Digest Algorithm 5）</em>，属于密码哈希算法的一种，可用于任意长度的字符串创建128位字符串值。</li>
<li>SHA-1 <em>（Secure Hash Algorithm 1）</em></li>
<li>SHA-2 <em>（Secure Hash Algorithm 2）</em>，在SHA-1的基础上做中大的修改，包含六个哈希函数，其摘要（哈希值）分别位224、256、384或512位：SHA-224、SHA-256、SHA-384、SHA-512，分别能够生成28字节、32字节、48字节、64字节的摘要。有了SHA-2的保护，就能够实现数据完整性，在文件中改变了一点数据，生成的摘要也会完全不同。SHA-2基于明文加密，还是不够安全。</li>
<li>MAC <em>（message authentication code）</em>，通过MAC算法从消息和密钥生成，MAC值允许验证者（拥有秘密密钥）检测到消息内容的任何更改，从而保护了消息的数据完整性。</li>
<li>HMAC，是MAC的更进一步拓展，使用MAC值+Hash值得组合方式，HMAC的计算中可以使用任何加密哈希函数，例如SHA-256等。</li>
</ul>
<h3 id="身份验证的实现"><a href="#身份验证的实现" class="headerlink" title="身份验证的实现"></a>身份验证的实现</h3><p>在通信前，传输数据的双方，恶意人士可以伪装成任何一方，窃取信息。如何认定对方是自己想通信的人？</p>
<h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>只有信息的发送者才能产生的别人无法伪造的一段数字串。<br>前面提到私钥只有自己拥有，公钥公开给所有人。所以调换过来用私钥加密，公钥解密。</p>
<ol>
<li>发送方先从报文中通过哈希函数生成摘要，将摘要通过私钥加密生成数字签名；</li>
<li>发送方将摘要和数字签名两个信息发送给接收方；</li>
<li>接收方获得数字签名后使用公钥解密，比对发过来的摘要，两个摘要相同就能认定是发送方发来的。<br>数字签名是非对称密钥加密技术与数字摘要技术的应用。</li>
</ol>
<h5 id="数字签名的认证问题"><a href="#数字签名的认证问题" class="headerlink" title="数字签名的认证问题"></a>数字签名的认证问题</h5><p>因为公钥谁都可以发布，接收方如何确定自己的公钥可信呢？<br>证书认证机构CA <em>（Certificate Authority）</em>，是负责发放和管理数字证书的权威机构，对公钥进行认证。CA中心为每个使用公开密钥的用户发放一个数字证书，数字证书的作用是证明证书中列出的用户合法拥有证书中列出的公开密钥。</p>
<h5 id="X-509证书"><a href="#X-509证书" class="headerlink" title="X.509证书"></a>X.509证书</h5><p>X.509是公开密钥证书的标准格式，这个文档将加密密钥与（个人或组织）进行安全的关联。</p>
<p>参考自：<a href="https://segmentfault.com/a/1190000022012971" target="_blank" rel="noopener">https://segmentfault.com/a/1190000022012971</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>ssl</tag>
        <tag>web security</tag>
      </tags>
  </entry>
  <entry>
    <title>我对HTTPS握手过程的简单理解</title>
    <url>/2020/03/17/%E6%88%91%E5%AF%B9HTTPS%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="服务端的数字证书"><a href="#服务端的数字证书" class="headerlink" title="服务端的数字证书"></a>服务端的数字证书</h4><p>web服务端在提供HTTPS服务的时候，需要配置一对公私钥，就是一套数字证书</p>
<h4 id="客户端发起请求"><a href="#客户端发起请求" class="headerlink" title="客户端发起请求"></a>客户端发起请求</h4><p>web客户端（浏览器）发起了HTTPS请求，服务端接收到请求，便把证书公钥发送给客户端<br>证书其实就是公钥，其中包含了颁发机构、过期时间等内容</p>
<a id="more"></a>
<h4 id="客户端解析证书"><a href="#客户端解析证书" class="headerlink" title="客户端解析证书"></a>客户端解析证书</h4><p>客户端由TLS完成解析证书</p>
<ol>
<li>验证公钥是否有效</li>
<li>如有效，则生成随机值；如证书有问题，则会警告提示证书有问题</li>
<li>用证书（公钥）加密随机值</li>
</ol>
<h4 id="返回随机值给服务端"><a href="#返回随机值给服务端" class="headerlink" title="返回随机值给服务端"></a>返回随机值给服务端</h4><ol>
<li>客户端发送经过证书加密后的随机值给服务端</li>
<li>服务端收到这条使用公钥加密的信息，使用私钥对其解密<em><code>非对称加密</code></em>，获取随机值</li>
</ol>
<h4 id="传输通过随机值加密的信息"><a href="#传输通过随机值加密的信息" class="headerlink" title="传输通过随机值加密的信息"></a>传输通过随机值加密的信息</h4><p>服务端和客户端通信都通过之前的那条随机值进行加解密<em><code>对称加密</code></em><br>只要不知道该随机值就无法对通信中的内容进行解密查看</p>
<p>参考自：<a href="https://blog.csdn.net/cout__waht/article/details/80859369" target="_blank" rel="noopener">https://blog.csdn.net/cout__waht/article/details/80859369</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>ssl</tag>
        <tag>web security</tag>
      </tags>
  </entry>
  <entry>
    <title>本站正式使用</title>
    <url>/2020/03/15/This-site-is-building/</url>
    <content><![CDATA[<p>更新时间：2020-3-17<br><strong>本博客开始使用</strong></p>
<blockquote>
<p>这站点有什么用？</p>
</blockquote>
<p>本来我是没有什么写记录的习惯的┑(￣Д ￣)┍<br>但是自从工作以来，每天获得的信息太多，许多有用有趣的知识、想法不记录下来隔几天就忘了<br>开通这个博客，可以作为一个内容输出口，协助记录自己生活的同时，迫使自己不要把燃起的动力给鸽了😂</p>
<a id="more"></a>
<blockquote>
<p>这个站点将会写什么内容？</p>
</blockquote>
<p>按照目前的想法，我会记录一些学到的新知识。同时也会把某个深夜脑里钻出来的想法写出来，有时候深夜人人都是哲学家。另外还有就是打算放一些自己觉得有趣的内容。</p>
<blockquote>
<p>关于博客命名？</p>
</blockquote>
<p>我把该博客网站命名为Sinnoh，实际上取自NDS游戏《Pokémon Platinum》的地区名<em>神奥地區</em><br>这作游戏的世界由——时间、空间还有超脱时空的暗物质世界组成，是宝可梦世界众多地区历来最酷最科幻的设定，也是我最喜欢的一作游戏<br>而该地区对应着现实中的北海道，非常让人喜欢的一个地方，正如游戏的那样神秘奥妙</p>
<blockquote>
<p>还有什么吗？</p>
</blockquote>
<p>暂时想不到了</p>
]]></content>
  </entry>
</search>
